// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: grudpb/grud.proto

package grudpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrudServiceClient is the client API for GrudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrudServiceClient interface {
	GetPostsByUserID(ctx context.Context, in *GetUserPostsRequest, opts ...grpc.CallOption) (*GetUserPostsResponse, error)
	GetPostByID(ctx context.Context, in *GetPostByIDRequest, opts ...grpc.CallOption) (*Data, error)
}

type grudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrudServiceClient(cc grpc.ClientConnInterface) GrudServiceClient {
	return &grudServiceClient{cc}
}

func (c *grudServiceClient) GetPostsByUserID(ctx context.Context, in *GetUserPostsRequest, opts ...grpc.CallOption) (*GetUserPostsResponse, error) {
	out := new(GetUserPostsResponse)
	err := c.cc.Invoke(ctx, "/collectpb.GrudService/GetPostsByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grudServiceClient) GetPostByID(ctx context.Context, in *GetPostByIDRequest, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/collectpb.GrudService/GetPostByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrudServiceServer is the server API for GrudService service.
// All implementations must embed UnimplementedGrudServiceServer
// for forward compatibility
type GrudServiceServer interface {
	GetPostsByUserID(context.Context, *GetUserPostsRequest) (*GetUserPostsResponse, error)
	GetPostByID(context.Context, *GetPostByIDRequest) (*Data, error)
	mustEmbedUnimplementedGrudServiceServer()
}

// UnimplementedGrudServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrudServiceServer struct {
}

func (UnimplementedGrudServiceServer) GetPostsByUserID(context.Context, *GetUserPostsRequest) (*GetUserPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostsByUserID not implemented")
}
func (UnimplementedGrudServiceServer) GetPostByID(context.Context, *GetPostByIDRequest) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostByID not implemented")
}
func (UnimplementedGrudServiceServer) mustEmbedUnimplementedGrudServiceServer() {}

// UnsafeGrudServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrudServiceServer will
// result in compilation errors.
type UnsafeGrudServiceServer interface {
	mustEmbedUnimplementedGrudServiceServer()
}

func RegisterGrudServiceServer(s grpc.ServiceRegistrar, srv GrudServiceServer) {
	s.RegisterService(&GrudService_ServiceDesc, srv)
}

func _GrudService_GetPostsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrudServiceServer).GetPostsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collectpb.GrudService/GetPostsByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrudServiceServer).GetPostsByUserID(ctx, req.(*GetUserPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrudService_GetPostByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrudServiceServer).GetPostByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collectpb.GrudService/GetPostByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrudServiceServer).GetPostByID(ctx, req.(*GetPostByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrudService_ServiceDesc is the grpc.ServiceDesc for GrudService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrudService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collectpb.GrudService",
	HandlerType: (*GrudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostsByUserID",
			Handler:    _GrudService_GetPostsByUserID_Handler,
		},
		{
			MethodName: "GetPostByID",
			Handler:    _GrudService_GetPostByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grudpb/grud.proto",
}
